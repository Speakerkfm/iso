package generator

import (
	"text/template"
)

var configTemplate = `external_dependencies:
  - host: 127.0.0.1:8001
    grpc:
      - /Users/usanin/Documents/go_projects/test_cmd/pb/service_b.proto`

var implTemplate = template.Must(template.New("impl").Parse(`package main

import (
	"github.com/Speakerkfm/iso/pkg/models"

	{{ range $i := .Imports }}{{ $i | printf "%s\n" }}{{ end }}
)

var ServiceProvider serviceProvider

type serviceProvider struct{}

func (sp serviceProvider) GetList() []*models.ProtoService {
	return []*models.ProtoService{
		{{ range $svc := .ProtoServices }}
		{
			Name: "{{ $svc.Name }}",
			Methods: []models.ProtoMethod{
				{{ range $method := $svc.Methods }}
				{
					Name:           "{{ $method.Name }}",
					RequestStruct:  &{{ $svc.PkgName }}.{{ $method.RequestType }}{},
					ResponseStruct: &{{ $svc.PkgName }}.{{ $method.ResponseType }}{},
				},
				{{ end }}
			},
			ProtoPath: "{{ $svc.ProtoPath }}",
		},
		{{ end }}
	}
}
`))

var old = `
// Code generated by iso.

package  main

import (
	{{ range $i := .Imports }}{{ if $i.Standard }}{{ $i | printf "%s\n" }}{{ end }}{{ end }}

	{{ range $i := .Imports }}{{ if not $i.Standard }}{{ $i | printf "%s\n" }}{{ end }}{{ end }}
)

{{ if .Method }}
func (i *{{ .Method.Service | implTypeName }}) {{ .Method.Name | goTypeName }}(ctx {{ pkg "context" }}Context, req *{{ .Method.RequestType.GoType $.ImplGoPkgPath | goTypeName }}) (*{{ .Method.ResponseType.GoType $.ImplGoPkgPath | goTypeName }}, error) {
	return nil, {{ pkg "errors" }}New("{{ .Method.Name | goTypeName }} not implemented")
}
{{ else }}
type {{ .Service | implTypeName}} struct {
	{{ pkg "desc" }}Unimplemented{{ .Service.GetName | goTypeName }}Server
}

// New{{ .Service.GetName | goTypeName }} create new {{ .Service | implTypeName}}
func New{{ .Service.GetName | goTypeName }}() *{{ .Service | implTypeName}} {
	return &{{ .Service | implTypeName}}{}
}
// GetDescription is a simple alias to the ServiceDesc constructor.
// It makes it possible to register the service implementation @ the server.
func (i *{{ .Service | implTypeName}}) GetDescription() {{ pkg "transport" }}ServiceDesc {
	return {{ pkg "desc" }}New{{ .Service.GetName | goTypeName }}ServiceDesc(i)
}
{{ end }}
`
